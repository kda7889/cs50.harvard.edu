sort1 uses: Bubble Sort

How do you know?:  The time complexity significantly improved for sorted data, which is characteristic of Bubble Sort. It performs well (O(n)) on already sorted data but poorly on random and reverse sorted data.

sort2 uses: Merge Sort

How do you know?: The time complexity remained consistent across all types of input, indicating that it might be using Merge Sort, which has a complexity of O(n log n) regardless of the input order.

sort3 uses: Selection Sort

How do you know?: The time complexity remained roughly the same across all types of input. This is characteristic of Selection Sort, which has a consistent complexity of O(n^2), independent of the initial order of the data.


----- python
import time

# Define smaller input files for better timing accuracy and larger comparisons
input_files_small = [
    'random5000.txt',
    'sorted5000.txt',
    'reversed5000.txt'
]

input_files_large = [
    'random50000.txt',
    'sorted50000.txt',
    'reversed50000.txt'
]

# Function to run a sorting program and measure its execution time
def measure_execution_time(program_path, input_file_path):
    start_time = time.time()
    try:
        # Run the sorting program
        process = subprocess.run(
            [program_path, input_file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=30  # Increase timeout for larger files
        )
    except subprocess.TimeoutExpired:
        return "Timeout"
    end_time = time.time()

    # Calculate the elapsed time
    elapsed_time = end_time - start_time
    return elapsed_time

# Measure the execution time for each sorting program with small and large input files
timing_results = {}

for program in sort_programs:
    program_path = os.path.join(sort_dir_path, program)
    timing_results[program] = {'small': {}, 'large': {}}

    # Measure timing for smaller files
    for input_file in input_files_small:
        input_file_path = os.path.join(sort_dir_path, input_file)
        timing_results[program]['small'][input_file] = measure_execution_time(program_path, input_file_path)

    # Measure timing for larger files
    for input_file in input_files_large:
        input_file_path = os.path.join(sort_dir_path, input_file)
        timing_results[program]['large'][input_file] = measure_execution_time(program_path, input_file_path)

# Display the timing results for analysis
timing_results
-----
